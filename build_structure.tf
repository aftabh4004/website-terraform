provider "aws" {
	region = "ap-south-1"
	profile = "aftab"
}


//  Creating Key pair by using public key generated by ssh-keygen

resource "aws_key_pair" "key" {
	key_name = "myterrakey"
	public_key = file("/home/aftab/Desktop/Cloud/task1/ssh-key/mykey.pub")
}

// Creating Security group which allow port 80 for http and port 22 for ssh

resource "aws_security_group" "mysg1" {
 	name        = "sg_task"
	description = "Allow SSH and HTTP"
	vpc_id      = "vpc-7b849913"

	ingress {
		description = "Allowing SSH"
		from_port   = 22
		to_port     = 22
		protocol    = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}

	ingress {
		description = "Allowing HTTP"
		from_port   = 80
		to_port     = 80
		protocol    = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}


	egress {
		from_port   = 0
		to_port     = 0
		protocol    = "-1"
		cidr_blocks = ["0.0.0.0/0"]
	}

	tags = {
		Name = "ssh_http"
	}
}


// Createing an instance which uses the key and the security group that we created above

resource "aws_instance" "os1" {
	ami = "ami-0447a12f28fddb066"
	instance_type = "t2.micro"
	security_groups = [ "${aws_security_group.mysg1.name}" ]
	key_name = aws_key_pair.key.key_name

	connection {
                type = "ssh"
                user = "ec2-user"
                private_key = file("/home/aftab/Desktop/Cloud/task1/ssh-key/mykey")
                host = aws_instance.os1.public_ip
        }

	// installing softwares into remote machine
        provisioner "remote-exec" {
                inline = [
                        "sudo yum install httpd php -y",
                        "sudo systemctl restart httpd",
                ]
        }


	tags = {
		Name = "myterraos1"

	}
}

// Creating EBS volume 

resource "aws_ebs_volume" "ebs_vol1" {
	availability_zone = aws_instance.os1.availability_zone
	size = 1
	tags = {
		Name = "terra_ebs1"
	}
}


// Attaching EBS volume to the instance

resource "aws_volume_attachment" "vol_att1" {
	device_name = "/dev/sdh"
	volume_id = aws_ebs_volume.ebs_vol1.id
	instance_id = aws_instance.os1.id
	force_detach = true

}

// Formating and mounting the ebs to the instance
// Deploying Code to remote machine in /var/www/html

resource "null_resource" "null1" {

	depends_on = [
		aws_volume_attachment.vol_att1
	]
	connection {
                type = "ssh"
                user = "ec2-user"
                private_key = file("/home/aftab/Desktop/Cloud/task1/ssh-key/mykey")
                host = aws_instance.os1.public_ip
        }

        provisioner "remote-exec" {
                inline = [
                        "sudo mkfs.ext4 /dev/xvdh",
                        "sudo mount /dev/xvdh /var/www/html",
			"sudo rm -rf /var/www/html/*"
                ]
        }


}

resource "null_resource" "null2" {
	depends_on = [
		null_resource.null1
	]

	 connection {
                type = "ssh"
                user = "ec2-user"
                private_key = file("/home/aftab/Desktop/Cloud/task1/ssh-key/mykey")
                host = aws_instance.os1.public_ip
         }

	provisioner "remote-exec" {
                inline = [
                        "mkdir /home/ec2-user/data"
                ]
        }
	
	provisioner "file" {
                source = "/home/aftab/Desktop/Cloud/task1/jenkins-data/Code/"
                destination = "/home/ec2-user/data"

        }
	
        provisioner "remote-exec" {
                inline = [
                        "sudo cp -rf /home/ec2-user/data/* /var/www/html"
                ]
        }


}


// Creating S3 bucket

resource "aws_s3_bucket" "mybuck" {
	bucket = "aftabh4004-tf-bucket"
	acl = "public-read"
}

// Uploading Object to the above bucket

resource "aws_s3_bucket_object" "obj" {
	for_each = fileset("/home/aftab/Desktop/Cloud/task1/jenkins-data/img/", "*")
	bucket = aws_s3_bucket.mybuck.bucket
	key = each.value
	source = "/home/aftab/Desktop/Cloud/task1/jenkins-data/img/${each.value}"
	acl = "public-read"

}

// Creating Cloudfront distribution with origin as S3
resource "aws_cloudfront_distribution" "s3_dist" {
	origin {
		domain_name = aws_s3_bucket.mybuck.bucket_domain_name
		origin_id = "s3-mybuck-bucket"
	}

	enabled = true

	default_cache_behavior {
		allowed_methods = ["GET", "HEAD"]
		cached_methods = ["GET", "HEAD"]
		target_origin_id = "s3-mybuck-bucket"

		forwarded_values {
			query_string = false

			cookies {
				forward = "none"
			}
		}

		viewer_protocol_policy = "redirect-to-https"
		min_ttl = 0
		default_ttl = 3600
		max_ttl = 86400
	}

	restrictions {
		geo_restriction {
			restriction_type = "blacklist"
			locations = [ "US" ]
		}
	}

	viewer_certificate {
		cloudfront_default_certificate = true
	}
}

resource "null_resource" "null3" {
        depends_on = [
                null_resource.null2,
		aws_cloudfront_distribution.s3_dist
		
        ]

         connection {
                type = "ssh"
                user = "ec2-user"
                private_key = file("/home/aftab/Desktop/Cloud/task1/ssh-key/mykey")
                host = aws_instance.os1.public_ip
         }

        provisioner "remote-exec" {
                inline = [
                        "echo ${aws_cloudfront_distribution.s3_dist.domain_name} > /home/ec2-user/file.txt",
			"sudo cp -rf /home/ec2-user/file.txt /var/www/html"
                ]
        }

}

/*
output "output1" {
	value = aws_ebs_volume.ebs_vol1
}
*/
